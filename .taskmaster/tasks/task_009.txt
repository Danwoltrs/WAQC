# Task ID: 9
# Title: Build Quality Template Management System
# Status: in-progress
# Dependencies: 6
# Priority: high
# Description: Create comprehensive quality template builder with client-specific parameters and flexible attribute configuration
# Details:
Create src/components/quality/template-builder.tsx for creating reusable quality templates. Support parameter configuration: screen size requirements (Pan, Peas 9-11, 12-20 or specific like 17/18), defect thresholds (primary/secondary), moisture content standards selection, cupping scale configuration (1-5, 1-7, 1-10), custom cupping attributes (add/remove Flavor, Aftertaste, Balance, etc.). Template management: library view, clone functionality, versioning, usage statistics. Create src/app/api/quality-templates/route.ts with full CRUD operations.

# Test Strategy:
Test template creation/editing, test parameter validation, test template cloning, test version tracking, verify usage statistics accuracy

# Subtasks:
## 1. Create Quality Template Builder Component [done]
### Dependencies: None
### Description: Build the main template builder interface with form controls for all quality parameters including screen size, defect thresholds, moisture standards, and cupping attributes
### Details:
Create src/components/quality/template-builder.tsx with comprehensive form interface. Include parameter configuration sections: screen size requirements (Pan, Peas 9-11, 12-20, specific 17/18), defect threshold settings (primary/secondary), moisture content standards selection, cupping scale configuration (1-5, 1-7, 1-10), and dynamic cupping attributes management (add/remove Flavor, Aftertaste, Balance, etc.). Implement form validation and real-time preview functionality.
<info added on 2025-10-13T14:54:08.644Z>
Screen size constraint refactoring completed successfully. New flexible constraint-based system implemented to replace fixed percentages. TypeScript type definitions created in src/types/screen-size-constraints.ts supporting four constraint types: minimum (≥), maximum (≤), range, and any. Template builder component updated with interactive constraint UI including dropdown selectors, constraint type selection, and conditional value inputs. Real-time validation system added with clear error messages. System no longer requires percentages to sum to 100%, allows defining only relevant screens per quality specification. Quality grading interface (src/app/assessment/grading/[id]/page.tsx) modified to dynamically load only screens with defined constraints, displaying constraint requirements as badges. Validation on submission implemented with detailed violation messages. TypeScript compilation successful with zero errors. Changes committed as 7ed3910 and pushed to main branch.
</info added on 2025-10-13T14:54:08.644Z>

## 2. Implement Template Management Library [pending]
### Dependencies: 9.1
### Description: Build template library view with search, filtering, clone functionality, and version tracking capabilities
### Details:
Create template library interface within the template builder component. Implement template listing with search and filter capabilities, clone functionality for duplicating existing templates, version tracking system for template changes, and usage statistics display. Include template preview modal and comparison functionality between versions.

## 3. Create Quality Templates API Routes [done]
### Dependencies: None
### Description: Build comprehensive CRUD API endpoints for quality template management with validation and error handling
### Details:
Create src/app/api/quality-templates/route.ts with full CRUD operations (GET, POST, PUT, DELETE). Implement template creation, retrieval, updating, and deletion with proper validation. Add endpoints for template cloning, version management, and usage statistics. Include proper error handling, authorization checks, and data validation middleware.

## 4. Implement Template Versioning System [pending]
### Dependencies: 9.2, 9.3
### Description: Build version control system for templates with change tracking, rollback capabilities, and version comparison
### Details:
Implement template versioning system that tracks all changes made to templates. Create version history interface, change diff visualization, rollback functionality to previous versions, and version comparison tools. Store version metadata including timestamp, user, and change description.

## 5. Build Template Usage Analytics [pending]
### Dependencies: 9.3
### Description: Create analytics system to track template usage patterns, popular configurations, and performance metrics
### Details:
Build usage analytics system that tracks which templates are used most frequently, identifies popular parameter configurations, and measures template performance metrics. Create analytics dashboard showing usage statistics, trend analysis, and template effectiveness reports. Include export functionality for analytics data.

## 6. Database Schema for Quality Templates [done]
### Dependencies: None
### Description: Design and implement database tables for quality templates with multi-language support, variable sample sizes, and template inheritance
### Details:
Create migration for quality_templates table with fields: id, name_en, name_pt, name_es, description_en, description_pt, description_es, sample_size_grams (default 300), template_parent_id (for cloning/inheritance), created_by, laboratory_id, is_global, screen_size_requirements (JSONB), defect_thresholds_primary, defect_thresholds_secondary, moisture_standard, cupping_scale_type, cupping_scale_min, cupping_scale_max, cupping_scale_increment, max_taints_allowed, max_faults_allowed, taint_fault_rule_type (AND/OR), created_at, updated_at. Create cupping_attributes table: id, template_id, attribute_name_en, attribute_name_pt, attribute_name_es, scale_type (1-5, 1-7, 1-10), increment (0.25, 0.5, 1.0), is_required, display_order. Create template_versions table for version tracking. Include RLS policies for template sharing (private/lab/global) and proper foreign keys.

## 7. Implement Flexible Attribute Scale System [done]
### Dependencies: None
### Description: Refactor cupping attribute system to support both numeric and custom wording-based scales with complete per-attribute customization
### Details:
### Implementation Summary

**Completed Components:**
1. Type system for flexible scales (`src/types/attribute-scales.ts`)
   - NumericScale: Custom min-max ranges with increments
   - WordingScale: Text labels with assigned numeric values
   - Predefined templates: SCA, COE, Brazil Traditional
   - Helper functions for validation and conversion

2. UI Components (`src/components/quality/scale-builder.tsx`)
   - ScaleBuilder: Main scale configuration component
   - NumericScaleBuilder: For numeric scale ranges
   - WordingScaleBuilder: For wording scales with add/edit/remove
   - AttributeScaleManager: Manages multiple attributes

3. Template Builder Integration
   - Updated template-builder.tsx to use AttributeScaleManager
   - Removed hardcoded scale types (1-5, 1-7, 1-10)
   - Added validation for new scale system
   - Maintained backward compatibility

4. Documentation (`docs/attribute-scales-migration.md`)
   - Complete migration guide with examples
   - Real-world template configurations
   - API integration documentation
   - Troubleshooting guide

**Features:**
- Two scale types per attribute (numeric or wording)
- Complete customization per attribute (different scales, different lengths)
- Predefined scale templates for quick setup
- Wording scales with editable labels and numeric values
- Add/remove/edit individual options per attribute
- Mix numeric and wording scales in same template
- Real-world examples: SCA 7-level wording, Brazil 10-level flavor

**Files Created:**
- src/types/attribute-scales.ts (271 lines)
- src/components/quality/scale-builder.tsx (515 lines)
- docs/attribute-scales-migration.md (477 lines)

**Files Modified:**
- src/components/quality/template-builder.tsx (integrated new system)

**Testing:**
- TypeScript compilation passes
- All validation logic implemented
- Ready for UI and integration testing

## 8. Implement Flexible Defect Configuration System [done]
### Dependencies: None
### Description: Build comprehensive defect management system with customizable defect lists, weights, and validation thresholds per origin/client/quality template
### Details:
### Implementation Summary

**Completed Components:**
1. Type system for flexible defects (`src/types/defect-configuration.ts`)
   - DefectConfig: Individual defect with name, weight, category
   - DefectThresholds: Max limits for primary, secondary, and total
   - DefectConfiguration: Complete defect setup
   - Predefined templates: Brazil SCA, Colombia, Guatemala, SCA Standard
   - Helper functions for calculations and validation

2. UI Components (`src/components/quality/defect-config-manager.tsx`)
   - DefectConfigManager: Main dialog component
   - DefectCategorySection: Manage primary and secondary defects
   - DefectThresholdsSection: Set validation limits
   - Template selector for quick loading

3. Template Builder Integration
   - Updated template-builder.tsx with DefectConfigManager
   - Wired "Manage Defects" button to open dialog
   - Added defect configuration storage in TemplateParameters
   - Integrated validation logic

**Features:**
- Two defect categories (Primary and Secondary)
- Customizable weight per defect (e.g., 1.00, 0.2, 0.5)
- Add/remove/edit defects in both categories
- Drag-to-reorder defect display
- Set max thresholds for Primary, Secondary, and Total
- Predefined templates by origin (Brazil, Colombia, Guatemala, SCA)
- Auto-calculate totals: count × weight for each defect
- Real-time validation with error messages

**Real-World Examples:**
- Brazil SCA: 6 primary (weight 1.00) + 9 secondary (weights 0.1-0.5)
- Colombia Standard: 5 primary + 9 secondary
- Guatemala Standard: 6 primary + 10 secondary
- Thresholds: Primary ≤5, Secondary ≤86, Total ≤91 (Brazil example)

**Files Created:**
- src/types/defect-configuration.ts (550 lines)
- src/components/quality/defect-config-manager.tsx (640 lines)

**Files Modified:**
- src/components/quality/template-builder.tsx (integrated defect manager)

**Testing:**
- TypeScript compilation passes
- All validation logic implemented
- Ready for UI and integration testing

## 9. Implement Flexible Taint/Fault Configuration System [done]
### Dependencies: None
### Description: Build comprehensive taint/fault management system with customizable definitions, intensity scales, and complex validation rules per quality template
### Details:
Created type system in src/types/taint-fault-configuration.ts with TaintFaultDefinition (custom intensity scales per item), TaintFaultValidationRules (zero tolerance, count limits, intensity caps), and predefined templates (SCA, Specialty, Commercial, Brazil). Built UI in src/components/quality/taint-fault-config-manager.tsx with separate sections for taints and faults, per-item scale editing, validation rules configuration, and template loading. Integrated with template-builder.tsx including full configuration UI, validation, and parameter storage. System provides complete flexibility - each template defines its own taint/fault list, custom intensity scales (numeric or wording), and acceptance criteria based on quality grade.

